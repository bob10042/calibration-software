#!/usr/bin/env python3
"""
APSM2000 Basic Communication - Reads 3 Channels
Uses either ACDC or no subfield to avoid timeouts if :AC is not recognized.
"""

import socket
import time
import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def main():
    HOST = "192.168.15.100"
    PORT = 10733

    logger.info(f"Attempting connection to {HOST}:{PORT}")

    s = None
    try:
        # Create socket & connect
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(10.0)
        s.connect((HOST, PORT))
        logger.info("Connected successfully")
        time.sleep(1.0)

        # 1) Clear
        logger.info("Sending *CLS")
        s.sendall(b"*CLS\n")
        time.sleep(0.5)

        # 2) IDN?
        logger.info("Sending *IDN?")
        s.sendall(b"*IDN?\n")
        time.sleep(0.5)
        try:
            idn_resp = s.recv(4096)
            if idn_resp:
                logger.info("IDN Reply: " + idn_resp.decode('ascii', errors='ignore').strip())
            else:
                logger.error("No IDN response.")
                return
        except socket.timeout:
            logger.error("Timeout waiting for IDN reply.")
            return

        # 3) Attempt reading CH1..CH3 in one command
        #    Use ACDC subfield (if :AC is not recognized by firmware).
        cmd = "READ? VOLTS:CH1:ACDC, VOLTS:CH2:ACDC, VOLTS:CH3:ACDC"
        # If that times out, try removing :ACDC => "READ? VOLTS:CH1, VOLTS:CH2, VOLTS:CH3"

        logger.info(f"Sending: {cmd}")
        s.sendall((cmd + "\n").encode('ascii'))
        time.sleep(1.0)  # allow instrument to respond

        try:
            resp = s.recv(4096)
            if resp:
                resp_str = resp.decode('ascii', errors='ignore').strip()
                logger.info(f"Raw read response: {resp_str}")
                # Typically something like:  +1.23456E+01,+2.34567E+01,+3.45678E+01
                parts = resp_str.split(',')
                if len(parts) == 3:
                    try:
                        v1 = float(parts[0])
                        v2 = float(parts[1])
                        v3 = float(parts[2])
                        logger.info(f"Channel 1 = {v1}  Channel 2 = {v2}  Channel 3 = {v3}")
                    except ValueError as ve:
                        logger.error(f"Failed to parse floats from {resp_str}: {ve}")
                else:
                    logger.warning(f"Unexpected field count in response: {resp_str}")
            else:
                logger.error("No response to the READ command.")
        except socket.timeout:
            logger.error("Timeout reading channels 1..3 voltage.")

    except socket.timeout:
        logger.error("Connection timed out.")
    except ConnectionRefusedError:
        logger.error("Connection refused - check IP/Port or M2000 settings.")
    except Exception as ex:
        logger.error(f"Unexpected error: {ex}")
    finally:
        if s:
            try:
                # Return to local
                logger.info("Sending LOCAL")
                s.sendall(b"LOCAL\n")
                time.sleep(0.3)
                s.close()
                logger.info("Connection closed")
            except:
                pass

if __name__ == "__main__":
    main()
